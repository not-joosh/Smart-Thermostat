;====================================================================
; Main.asm file generated by New Project wizard
;
; Created   :   Wed NOV 23, 2023
; Processor :   8086
;====================================================================

;--------       INTERUPT PROCEDURES      --------;  

PROCED0 SEGMENT
    ISR0 PROC FAR
    ASSUME CS:PROCED0, DS:DATA
    PUSHF
    PUSH AX
    PUSH DX
    ; INTR | CONTROLS 120V AIR CONDITIONING UNIT (TURN OFF IF INSUFFICIENT VOLTAGE)       
    ; SIGNAL THAT THERE IS NO POWER FOR "US" AC
    MOV [US_STANDARD_AC], 0d                    
    ; IF THE AIRCON WAS ON, LET'S JUST TURN THE AIRCON OFF, BUT MAINTAIN THE
    ; TOGGLE STATE FOR WHEN THE AIRCON COMES BACK ON
    MOV AL, [US_TOGGLE]
    CMP AL, 0d
    JE EXIT_ISR0    
    
    ; OTHERWISE, LETS TURN IT OFF     
    MOV AL, 0d                          
    OUT THIRD_PORTA, AL ; turning OFF pin of 120_AC
    
    EXIT_ISR0:  
    POP DX
    POP AX
    POPF
    IRET
    ISR0 ENDP
PROCED0 ENDS     

PROCED1 SEGMENT
    ISR1 PROC FAR
    ASSUME CS:PROCED1, DS:DATA
    PUSHF
    PUSH AX
    PUSH DX
    ; INTR | CONTROLS 120V AIR CONDITIONING UNIT (TURN ON IF SUFFICIENT VOLTAGE)       
    ; SIGNAL THAT THERE IS NOW POWER FOR "US" AC
    MOV [US_STANDARD_AC], 1d                    
    ; IF THE AIRCON WAS ON, LET'S JUST TURN THE AIRCON OFF, BUT MAINTAIN THE
    ; TOGGLE STATE FOR WHEN THE AIRCON COMES BACK ON
    MOV AL, [US_TOGGLE]
    CMP AL, 0d
    JNE EXIT_ISR1    
    
    ; OTHERWISE LETS TURN IT BACK ON                            
    MOV AL, 1d
    OUT THIRD_PORTA, AL ; turning ON pin of 120_AC
    EXIT_ISR1: 
    POP DX
    POP AX
    POPF
    IRET
    ISR1 ENDP
PROCED1 ENDS    

PROCED2 SEGMENT
    ISR2 PROC FAR
    ASSUME CS:PROCED2, DS:DATA
    PUSHF
    PUSH AX
    PUSH DX
    ; INTR | CONTROLS 220V AIR CONDITIONING UNIT (TURN OFF IF INSUFFICIENT VOLTAGE)      
    ; SIGNAL THAT THERE IS NO POWER FOR "EU" AC
    MOV [EU_STANDARD_AC], 0d                    
    ; IF THE AIRCON WAS ON, LET'S JUST TURN THE AIRCON OFF, BUT MAINTAIN THE
    ; TOGGLE STATE FOR WHEN THE AIRCON COMES BACK ON
    MOV AL, [EU_TOGGLE]
    CMP AL, 0d
    JE EXIT_ISR2    
    
    ; OTHERWISE, LETS TURN IT OFF                              
    MOV AL, 0d
    OUT THIRD_PORTB, AL ; turning OFF pin of 220_AC
    EXIT_ISR2: 
    POP DX
    POP AX
    POPF
    IRET
    ISR2 ENDP
PROCED2 ENDS     

PROCED3 SEGMENT
    ISR3 PROC FAR
    ASSUME CS:PROCED3, DS:DATA
    PUSHF
    PUSH AX
    PUSH DX
    ; INTR | CONTROLS 220V AIR CONDITIONING UNIT (TURN ON IF SUFFICIENT VOLTAGE)       
    ; SIGNAL THAT THERE IS NO POWER FOR "EU" AC
    MOV [EU_STANDARD_AC], 1d                    
    ; IF THE AIRCON WAS ON, LET'S JUST TURN THE AIRCON OFF, BUT MAINTAIN THE
    ; TOGGLE STATE FOR WHEN THE AIRCON COMES BACK ON
    MOV AL, [EU_TOGGLE]
    CMP AL, 1d
    JNE EXIT_ISR3    
    
    ; OTHERWISE LETS TURN IT BACK ON                              
    MOV AL, 1d
    OUT THIRD_PORTB, AL ; turning ON pin of 220_AC
    EXIT_ISR3: 
    POP DX
    POP AX
    POPF
    IRET
    ISR3 ENDP
PROCED3 ENDS 

PROCED5 SEGMENT
    ISR5 PROC FAR
    ASSUME CS:PROCED5, DS:DATA
    PUSHF
    PUSH AX
    PUSH DX
    ; CHECK IF US AC HAS POWER
    MOV AL, [US_STANDARD_AC]  
    CMP AL, 0d
    JE EXIT_ISR5
    ; IT HAS POWER AT THIS POINT, WE CAN TOGGLE
    MOV AL, [US_TOGGLE]
    CMP AL, 0d ; CHECK IF IT IS OFF
    JE TURN_ON_INT5 
    ; ITS ON BY THIS POINT, SO WE WILL TURN IT OFF 
    TURN_OFF_INT5:   
        MOV AL, 0d
        OUT THIRD_PORTA, AL
        MOV [US_TOGGLE], 0d
        JMP EXIT_ISR5
    TURN_ON_INT5:    
        MOV AL, 1d
        MOV [US_TOGGLE], AL
        OUT THIRD_PORTA, AL
    EXIT_ISR5:  
    POP DX
    POP AX
    POPF
    IRET
    ISR5 ENDP
PROCED5 ENDS   

PROCED6 SEGMENT
    ISR6 PROC FAR
    ASSUME CS:PROCED6, DS:DATA
    PUSHF
    PUSH AX
    PUSH DX
    ; CHECK IF US AC HAS POWER
    MOV AL, [EU_STANDARD_AC]  
    CMP AL, 0d
    JE EXIT_ISR6
    ; IT HAS POWER AT THIS POINT, WE CAN TOGGLE
    MOV AL, [EU_TOGGLE]
    CMP AL, 0d ; CHECK IF IT IS OFF
    JE TURN_ON_INT6 
    ; ITS ON BY THIS POINT, SO WE WILL TURN IT OFF
    TURN_OFF_INT6:   
        MOV AL, 0d
        OUT THIRD_PORTB, AL
        MOV [EU_TOGGLE], 0d
        JMP EXIT_ISR6 
    TURN_ON_INT6:          
        MOV AL, 1d
        MOV [EU_TOGGLE], AL
        OUT THIRD_PORTB, AL
    EXIT_ISR6:   
    POP DX
    POP AX
    POPF
    IRET
    ISR6 ENDP
PROCED6 ENDS   

;-----------------------------;
;-----------------------------;
;-----------------------------;
;-----------------------------;
;-----------------------------;
;-----------------------------;
;-----------------------------;
;-----------------------------;
;-----------------------------;
;-----------------------------;
;-----------------------------;
;-----------------------------;
;-----------------------------;
;-----------------------------;


DATA SEGMENT 
    ;<------------------------------------ 8255'S --->;
    ; FIRST 8255 (LCD + KEYPAD)
    FIRST_PORTA         EQU 0C0H         ; PORTA ADDRESS 
    FIRST_PORTB         EQU 0C2H         ; PORTB ADDRESS 
    FIRST_PORTC         EQU 0C4H         ; PORTC ADDRESS 
    FIRST_COMREG        EQU 0C6H 	     ; COMMAND REGISTER 
                        
    ; SECOND 8255 (ADC + CLOCK TIMER)
    SECOND_PORTA        EQU 0F0H         ; PORTA ADDRESS 
    SECOND_PORTB        EQU 0F2H         ; PORTB ADDRESS 
    SECOND_PORTC        EQU 0F4H         ; PORTC ADDRESS 
    SECOND_COMREG       EQU 0F6H 	     ; COMMAND REGISTER 
    
    
    ; THIRD 8255 (AIRCON CTRL + AIRCON STATUS)
    THIRD_PORTA         EQU 0E0H         ; PORTA ADDRESS 
    THIRD_PORTB         EQU 0E2H         ; PORTB ADDRESS 
    THIRD_PORTC         EQU 0E4H         ; PORTC ADDRESS 
    THIRD_COMREG        EQU 0E6H 	     ; COMMAND REGISTER 
                                    
    SETUP_8255_1        DB 10001001B     ; OUT: A, B -=*=- IN: C
    SETUP_8255_2        DB 10011001B     ; OUT: B    -=*=- IN: A, C
    SETUP_8255_3        DB 10001001B     ; OUT: A    -=*=- IN: B, C
    
    ;<------------------------------------- 8253 --->;
    CLOCK0 	            EQU 0C8H 		
    T_COMREG 	        EQU 0CEH		
    CWORD 	            EQU 00111000B
    
    ;<------------------------------------- 8259 --->;
    PIC1                EQU 0D0H        ; 8259 ADDRESS FOR A0 = 0  		
    PIC2                EQU 0D2H        ; 8259 ADDRESS FOR A0 = 1
    ICW1                EQU 13H         ; 0001 0011b  EDGE TRIGGERED       
    ICW2                EQU 80H         
    ICW4                EQU 03H                         
    OCW1                EQU 10010000B   ; ACTIVE INTERRUPTS                         
    ;<-- KEYPAD VARIABLES -->;         
    KEY0                DB 1DH          ; 0001 1101B
    KEY1                DB 10H          ; 0001 0000B
    KEY2                DB 11H          ; 0001 0001B
    KEY3                DB 12H          ; 0001 0010B
    KEY4                DB 14H          ; 0001 0100B 
    KEY5                DB 15H          ; 0001 0101B
    KEY6                DB 16H          ; 0001 0110B
    KEY7                DB 18H          ; 0001 1000B
    KEY8                DB 19H          ; 0001 1001B
    KEY9                DB 1AH          ; 0001 1010B
    KEY_STAR            DB 1CH          ; 0001 1100B
    KEY_HASH            DB 1EH          ; 0001 1110B
    
    ;<-- CUSTOM DATA VARIABLES -->;                 
    ; TIMER RELATED 
    ADJUST_REQUESTED    DB 0d
    
    
    ; ADC RELATED     
    ADC_PROMPT0         DB "TEMP:", "$"
    LAST_READ_TEMP      DB 0d
    PREV_ADC_BINARY     DB 0d  
    
    ; AIRCON RELATED
    US_STANDARD_AC      DB 0d ; flag for if it has power or not
    EU_STANDARD_AC      DB 0d ; flag for if it has power or not 
    US_TOGGLE           DB 0d ; toggle status
    EU_TOGGLE           DB 0d ; toggle status 
    
DATA ENDS     
STK SEGMENT STACK
    BOS DW 64d DUP(?)
    TOS LABEL WORD
STK ENDS
CODE SEGMENT PUBLIC 'CODE'
    ASSUME CS:CODE, DS:DATA, SS:STK
START:
;                                                 ;
;<-------------------- SETUP  ------------------->;
;                                                 ; 
    ORG 08000H          ; ADDRESS IN MEMORY FOR THIS SEGMENT  
    MOV AX, DATA
    MOV DS, AX          ; SETTING DATA SEGMENT ADDRESS
    MOV AX, STK       
    MOV SS, AX          ; SETTING DATA SEGMENT ADDRESS
    LEA SP, TOS         ; SETTING ADDRESS OF SP AS TOP OF STACK
    CLI                 ; CLEARS "IF" FLAG  
         
    INIT:                        
    ; SETTING UP BOTH 8255'S 
    MOV AL, SETUP_8255_1
	OUT FIRST_COMREG, AL
	 
	MOV AL, SETUP_8255_2
    OUT SECOND_COMREG, AL

	MOV AL, SETUP_8255_3
	OUT THIRD_COMREG, AL

	
    ; SETTING UP THE CLOCK
    MOV DX, T_COMREG
    MOV AL, CWORD
    OUT DX, AL
    
    ;SETUP THE 8259
    MOV DX, PIC1        
    MOV AL, ICW1        
    OUT DX, AL        
    MOV DX, PIC2   
    MOV AL, ICW2  
    OUT DX, AL          
    MOV AL, ICW4      
    OUT DX, AL         
    MOV AL, OCW1        
    OUT DX, AL          
    STI      
    INTERRUPT_VECTORS:
        MOV AX, OFFSET ISR0
        MOV [ES:200H], AX
        MOV AX, SEG ISR0
        MOV [ES:202H], AX 
        
        MOV AX, OFFSET ISR1
        MOV [ES:204H], AX
        MOV AX, SEG ISR1
        MOV [ES:206H], AX    
        
        MOV AX, OFFSET ISR2
        MOV [ES:208H], AX
        MOV AX, SEG ISR2
        MOV [ES:20AH], AX 
        
        MOV AX, OFFSET ISR3
        MOV [ES:20CH], AX
        MOV AX, SEG ISR3
        MOV [ES:20EH], AX  
        
        MOV AX, OFFSET ISR5
        MOV [ES:214H], AX
        MOV AX, SEG ISR5
        MOV [ES:216H], AX 
        
        MOV AX, OFFSET ISR6
        MOV [ES:218H], AX
        MOV AX, SEG ISR6
        MOV [ES:21AH], AX 
        
	
    ; INIT THE LCD
    CALL INIT_LCD  
;                                                 ;
;<------------------- MAIN LOOP ----------------->;
;   
    MAIN:     
        ENDLESS:  
            CALL READ_ADC
            CMP AL, [PREV_ADC_BINARY]
            JNE NEXTPHASE   
            JMP ENDLESS 
        NEXTPHASE: 
        CALL UPDATE_TEMP_DISPLAY   
        JMP MAIN     
;--------------- DEBUG -----------------;
DEBUG PROC   
    RET
DEBUG ENDP  
DEBUG_STOP PROC
    ;CALL DEBUG
    OUT FIRST_PORTA, AL
    ENDLESS_DB:
        JMP ENDLESS_DB 
    RET    
DEBUG_STOP ENDP        
;                                                 ;
;<-------------------    ADC    ----------------->;
;                                                 ;   

READ_ADC PROC
    PULSE_ADC:
        XOR AX, AX
        MOV DX, SECOND_PORTB
        MOV AL, 07H
        OUT DX, AL
        CALL DELAY
        
        XOR AX, AX
        MOV DX, SECOND_PORTB
        MOV AL, 15d
        OUT DX, AL
        CALL DELAY
        
        MOV DX, SECOND_PORTB
        MOV AL, 00H
        OUT DX, AL
    BUFFER_DATA:
        XOR AX, AX
        MOV DX, SECOND_PORTC 
        MOV AL, 01H
        OUT DX, AL 
        CALL DELAY
        XOR AX, AX
        MOV DX, SECOND_PORTA
        IN AL, DX 
        PUSH AX
        XOR AX, AX
        MOV DX, SECOND_PORTC 
        MOV AL, 00H
        OUT DX, AL 
        POP AX
    RET
READ_ADC ENDP

UPDATE_TEMP_DISPLAY PROC 
    MOV [PREV_ADC_BINARY], AL
    PUSH AX
    REINIT_SCREEN:
        ; PRINTING "TEMP:"  
        MOV AL, 080H
        CALL INST_CTRL
        LEA SI, ADC_PROMPT0                         
        CALL PRINT_STR      
        
        ; PRINTING "C"
        MOV AL, 0C3H
        CALL INST_CTRL
        MOV AL, "C"
        CALL DATA_CTRL 
        
        MOV AL, 0C2H
        CALL INST_CTRL
        MOV AL, " "
        CALL DATA_CTRL
        
        MOV AL, 0C1H
        CALL INST_CTRL
        MOV AL, " "
        CALL DATA_CTRL
    POP AX 
    DECODING_ADC: 
        XOR BX, BX
        MOV BL, 10d
        MUL BX
        MOV BL, 17d
        DIV BX
        
        MOV BL, 10d   
        XOR DX, DX      
        MOV DL, 083H
    PUSH AX
    MOV AL, 0C3H   
    CALL INST_CTRL
    MOV AL, "C"
    CALL DATA_CTRL
    POP AX                
    PRINT_TEMPERATURE_LOOP:       
        XOR AH, AH
        DIV BL
        CMP AL, 0d ; AH 9
        JE VALIDATE_EXIT
        FINAL_PRINT:        
            PUSH AX       
            MOV AL, DL
            CALL INST_CTRL
            POP AX
            PUSH AX  
            MOV AL, AH 
            ADD AL, 30H
            CALL DATA_CTRL
            POP AX                   
            JMP NEXT_CHAR
        VALIDATE_EXIT:
            CMP AH, 0d
            JE EXIT_PRINT_SEQ 
            JMP FINAL_PRINT           
        NEXT_CHAR:
        SUB DL, 1H
        JMP PRINT_TEMPERATURE_LOOP
    EXIT_PRINT_SEQ:
    RET
UPDATE_TEMP_DISPLAY ENDP


;                                                 ;
;<------------------- FUNCTIONS ----------------->;
;                                                 ;   



;                                                 ;
;<-------------- KEYPAD CHECKER  ---------------->;
;                                                 ;
READ_KEYSTROKE PROC      
    ; THIS PROCESS IS THE RESPONSE TO MAIN MENU INPUT
    CMP AL, KEY0 
    JE IS_KEY0_1
    
    CMP AL, KEY1
    JE IS_KEY1_1
    
    CMP AL, KEY2
    JE IS_KEY2_1
    
    CMP AL, KEY3
    JE IS_KEY3_1
    
    CMP AL, KEY4
    JE IS_KEY4_1
    
    CMP AL, KEY5
    JE IS_KEY5_1
    
    CMP AL, KEY6
    JE IS_KEY6_1
    
    CMP AL, KEY7 
    JE IS_KEY7_1
    
    CMP AL, KEY8
    JE IS_KEY8_1
    
    CMP AL, KEY9  
    JE IS_KEY9_1
    ; IS NOT A VALID KEY AT THIS POINT
    JMP STOP_READ_KEY
    IS_KEY0_1:   
         
        JMP KEY_READ_TRUE
    IS_KEY1_1:
        
        JMP KEY_READ_TRUE
    IS_KEY2_1:
        
        JMP KEY_READ_TRUE
    IS_KEY3_1:
        
        JMP KEY_READ_TRUE
    IS_KEY4_1:
        
        JMP KEY_READ_TRUE
    IS_KEY5_1:
        
        JMP KEY_READ_TRUE
    IS_KEY6_1:
        
        JMP KEY_READ_TRUE
    IS_KEY7_1:
        
        JMP KEY_READ_TRUE
    IS_KEY8_1:
        
        JMP KEY_READ_TRUE
    IS_KEY9_1:
    
        JMP KEY_READ_TRUE
    KEY_READ_TRUE:             
        MOV ADJUST_REQUESTED, 1d
    STOP_READ_KEY:
    RET
READ_KEYSTROKE ENDP

;                                                 ;
;<----------------- LCD COMMANDS ---------------->;
;                                                 ;
PRINT_STR PROC 
    PRINT_LOOP:
        MOV AL, [SI]
        CMP AL, "$"
        JE EXIT_PRINT  
        CALL DATA_CTRL
        INC SI
        JMP PRINT_LOOP
    EXIT_PRINT:
        RET
PRINT_STR ENDP  

DATA_CTRL PROC  
    ; PRINT CHARACTER         
    MOV DX, FIRST_PORTA
    OUT DX, AL
    
    MOV DX, FIRST_PORTB
    MOV AL, 03H
    OUT DX, AL
    
    CALL DELAY
    MOV DX, FIRST_PORTB
    MOV AL, 01H
    OUT DX, AL
    RET
DATA_CTRL ENDP    

DATA_CTRL_TEST PROC  
    ; PRINT CHARACTER         
    MOV DX, FIRST_PORTA
    OUT DX, AL
    
    MOV DX, FIRST_PORTB
    MOV AL, 03H
    OUT DX, AL
    
    CALL DELAY
    MOV DX, FIRST_PORTB
    MOV AL, 01H
    OUT DX, AL
    RET
DATA_CTRL_TEST ENDP  

INIT_LCD PROC
    ; SELECT LCD OF 2 ROWS
    MOV AL, 38H
    CALL INST_CTRL
    
    
    
    MOV AL, 08H
    CALL INST_CTRL
    
    MOV AL, 01H
    CALL INST_CTRL
    
    MOV AL, 06H
    CALL INST_CTRL
    
    MOV AL, 0CH
    CALL INST_CTRL
    RET
INIT_LCD ENDP

INST_CTRL PROC
    ; HIGH TO LOW
    MOV DX, FIRST_PORTA 
    OUT DX, AL
    
    MOV DX, FIRST_PORTB 
    MOV AL, 02H 
    OUT DX, AL
    
    CALL DELAY
    
    MOV DX, FIRST_PORTB ; MOVE BACK TO LOW
    MOV AL, 00H
    OUT DX, AL
    RET
INST_CTRL ENDP

;                                                 ;
;<----------- CLOCK AND MANUAL DELAYS ----------->;
;                                                 ;

DELAY_CLOCK PROC
    MOV DX, CLOCK0
    MOV AL, 0D0H   ; 0A0H
    OUT DX, AL
    MOV AL, 07H
    OUT DX, AL
    WAITING:
        MOV DX, THIRD_PORTC
        IN AL, DX
        CMP AL, 00H
        JNE WAITING
    RET
DELAY_CLOCK ENDP


DELAY PROC
    MOV CX, 0FFFH
    DELAY_LOOP:
    LOOP DELAY_LOOP
    RET
DELAY ENDP
CODE ENDS 
END START